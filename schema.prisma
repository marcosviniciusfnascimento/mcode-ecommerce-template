// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  password      String
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "users")
}

model Store {
  id          String @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  category    Category[] @relation("StoreToCategory")
  size        Size[] @relation("StoreToSize")
  colors        Color[] @relation("StoreToColor")
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Billboard {
  id       String @id @default(uuid())
  storeId  String
  store    Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label    String
  imageUrl  String
  categories Category[]
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Category {
  id       String @id @default(uuid())
  storeId  String
  store    Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  name    String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Size {
  id         String @id @default(uuid())
  storeId    String
  store      Store @relation("StoreToSize", fields: [storeId], references: [id])
  name       String
  value      String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model Color {
  id         String @id @default(uuid())
  storeId    String
  store      Store @relation("StoreToColor", fields: [storeId], references: [id])
  name       String
  value      String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
}